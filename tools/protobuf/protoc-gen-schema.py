#!/usr/bin/env python

import sys
import io
import itertools
import json
from google.protobuf.compiler import plugin_pb2
from google.protobuf.descriptor_pb2 import DescriptorProto, EnumDescriptorProto, FieldDescriptorProto


def generate_header(filedescriptorproto):
    yield '// ---------------------------------------------------------------------------\n'
    yield '// This file is auto-generated.\n'
    yield '// Do not edit this file directly.\n'
    yield '// ---------------------------------------------------------------------------\n'
    yield '\n'
    yield '#ifndef INCLUDE_IMLAB_SCHEMA_H_\n'
    yield '#define INCLUDE_IMLAB_SCHEMA_H_\n'
    yield '\n'
    yield 'namespace imlab {\n'
    yield 'namespace schema {\n'
    yield '\n'

    # Traverse a nested message and create fields with a fully qualified name.
    def _traverse(path, descriptorproto):
        for field in descriptorproto.field:
            if field.type != FieldDescriptorProto.TYPE_GROUP and field.type != FieldDescriptorProto.TYPE_MESSAGE and field.type != FieldDescriptorProto.TYPE_ENUM:
                # we have a normal field
                yield '    ' + 'Column<> ' + '_'.join(path + [field.name]) + ';\n'
        for nested in descriptorproto.nested_type:
            # we have a nested field (e.g. group or another message)
            for line in _traverse(path + [nested.name], nested):
                yield line

    for message in filedescriptorproto.message_type:
        yield 'class ' + message.name + 'Table : public TableBase<' + message.name + 'Type> {\n'
        for line in _traverse([], message):
            yield line
        yield '}\n'


    yield '\n'
    yield '}  // namespace schema\n'
    yield '}  // namespace imlab\n'
    yield '#endif  // INCLUDE_IMLAB_SCHEMA_H_\n'


def generate_source(filedescriptorproto):
    yield '// ---------------------------------------------------------------------------\n'
    yield '// This file is auto-generated.\n'
    yield '// Do not edit this file directly.\n'
    yield '// ---------------------------------------------------------------------------\n'
    yield '\n'
    yield '#include "imlab/schema.h"\n'
    yield '\n'
    yield 'namespace imlab {\n'
    yield 'namespace schema {\n'

    yield '}  // namespace schema\n'
    yield '}  // namespace imlab\n'


def generate_code(request, response):
    for fdesc in request.proto_file:
        if len(fdesc.dependency) > 0:
            sys.stderr.write('Dependencies in .proto file are not supported.')
        if len(fdesc.enum_type) > 0:
            sys.stderr.write('Enums are not supported.')
        if len(fdesc.service) > 0:
            sys.stderr.write('Services are not supported.')
        if len(fdesc.extension) > 0:
            sys.stderr.write('Extensions are not supported.')

        headerdata = ''.join(generate_header(fdesc))
        sourcedata = ''.join(generate_source(fdesc))

        f = response.file.add()
        f.name = 'schema.h'
        f.content = headerdata

        f = response.file.add()
        f.name = 'schema.cc'
        f.content = sourcedata


if __name__ == '__main__':
    # Read request message from stdin
    data = io.open(sys.stdin.fileno(), "rb").read()

    # Parse request
    request = plugin_pb2.CodeGeneratorRequest.FromString(data)

    # Create response
    response = plugin_pb2.CodeGeneratorResponse()

    # Generate code
    generate_code(request, response)

    # Write to stdout
    io.open(sys.stdout.fileno(), "wb").write(response.SerializeToString())
