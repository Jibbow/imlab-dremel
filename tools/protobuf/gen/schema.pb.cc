// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "schema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Document_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_reflection_ = NULL;
const ::google::protobuf::Descriptor* Document_Links_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_Links_reflection_ = NULL;
const ::google::protobuf::Descriptor* Document_Name_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_Name_reflection_ = NULL;
const ::google::protobuf::Descriptor* Document_Name_Language_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_Name_Language_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_schema_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_schema_2eproto() {
  protobuf_AddDesc_schema_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "schema.proto");
  GOOGLE_CHECK(file != NULL);
  Document_descriptor_ = file->message_type(0);
  static const int Document_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, docid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, links_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, name_),
  };
  Document_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Document_descriptor_,
      Document::default_instance_,
      Document_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_[0]),
      -1,
      -1,
      sizeof(Document),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _internal_metadata_),
      -1);
  Document_Links_descriptor_ = Document_descriptor_->nested_type(0);
  static const int Document_Links_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Links, backward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Links, forward_),
  };
  Document_Links_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Document_Links_descriptor_,
      Document_Links::default_instance_,
      Document_Links_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Links, _has_bits_[0]),
      -1,
      -1,
      sizeof(Document_Links),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Links, _internal_metadata_),
      -1);
  Document_Name_descriptor_ = Document_descriptor_->nested_type(1);
  static const int Document_Name_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name, url_),
  };
  Document_Name_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Document_Name_descriptor_,
      Document_Name::default_instance_,
      Document_Name_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name, _has_bits_[0]),
      -1,
      -1,
      sizeof(Document_Name),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name, _internal_metadata_),
      -1);
  Document_Name_Language_descriptor_ = Document_Name_descriptor_->nested_type(0);
  static const int Document_Name_Language_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name_Language, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name_Language, country_),
  };
  Document_Name_Language_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Document_Name_Language_descriptor_,
      Document_Name_Language::default_instance_,
      Document_Name_Language_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name_Language, _has_bits_[0]),
      -1,
      -1,
      sizeof(Document_Name_Language),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document_Name_Language, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_schema_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Document_descriptor_, &Document::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Document_Links_descriptor_, &Document_Links::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Document_Name_descriptor_, &Document_Name::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Document_Name_Language_descriptor_, &Document_Name_Language::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_schema_2eproto() {
  delete Document::default_instance_;
  delete Document_reflection_;
  delete Document_Links::default_instance_;
  delete Document_Links_reflection_;
  delete Document_Name::default_instance_;
  delete Document_Name_reflection_;
  delete Document_Name_Language::default_instance_;
  delete Document_Name_Language_reflection_;
}

void protobuf_AddDesc_schema_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_schema_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014schema.proto\"\356\001\n\010Document\022\r\n\005DocId\030\001 \002"
    "(\003\022\036\n\005links\030\002 \001(\n2\017.Document.Links\022\034\n\004na"
    "me\030\005 \003(\n2\016.Document.Name\032*\n\005Links\022\020\n\010Bac"
    "kward\030\003 \003(\003\022\017\n\007Forward\030\004 \003(\003\032i\n\004Name\022)\n\010"
    "language\030\006 \003(\n2\027.Document.Name.Language\022"
    "\013\n\003Url\030\t \001(\t\032)\n\010Language\022\014\n\004Code\030\007 \002(\t\022\017"
    "\n\007Country\030\010 \001(\t", 255);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "schema.proto", &protobuf_RegisterTypes);
  Document::default_instance_ = new Document();
  Document_Links::default_instance_ = new Document_Links();
  Document_Name::default_instance_ = new Document_Name();
  Document_Name_Language::default_instance_ = new Document_Name_Language();
  Document::default_instance_->InitAsDefaultInstance();
  Document_Links::default_instance_->InitAsDefaultInstance();
  Document_Name::default_instance_->InitAsDefaultInstance();
  Document_Name_Language::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_schema_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_schema_2eproto {
  StaticDescriptorInitializer_schema_2eproto() {
    protobuf_AddDesc_schema_2eproto();
  }
} static_descriptor_initializer_schema_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document_Links::kBackwardFieldNumber;
const int Document_Links::kForwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document_Links::Document_Links()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Document.Links)
}

void Document_Links::InitAsDefaultInstance() {
}

Document_Links::Document_Links(const Document_Links& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Document.Links)
}

void Document_Links::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document_Links::~Document_Links() {
  // @@protoc_insertion_point(destructor:Document.Links)
  SharedDtor();
}

void Document_Links::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Document_Links::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document_Links::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_Links_descriptor_;
}

const Document_Links& Document_Links::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_schema_2eproto();
  return *default_instance_;
}

Document_Links* Document_Links::default_instance_ = NULL;

Document_Links* Document_Links::New(::google::protobuf::Arena* arena) const {
  Document_Links* n = new Document_Links;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document_Links::Clear() {
// @@protoc_insertion_point(message_clear_start:Document.Links)
  backward_.Clear();
  forward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Document_Links::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Document.Links)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 Backward = 3;
      case 3: {
        if (tag == 24) {
         parse_Backward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_backward())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_backward())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Backward;
        if (input->ExpectTag(32)) goto parse_Forward;
        break;
      }

      // repeated int64 Forward = 4;
      case 4: {
        if (tag == 32) {
         parse_Forward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_forward())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_forward())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Forward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Document.Links)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Document.Links)
  return false;
#undef DO_
}

void Document_Links::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Document.Links)
  // repeated int64 Backward = 3;
  for (int i = 0; i < this->backward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->backward(i), output);
  }

  // repeated int64 Forward = 4;
  for (int i = 0; i < this->forward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->forward(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Document.Links)
}

::google::protobuf::uint8* Document_Links::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Document.Links)
  // repeated int64 Backward = 3;
  for (int i = 0; i < this->backward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->backward(i), target);
  }

  // repeated int64 Forward = 4;
  for (int i = 0; i < this->forward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->forward(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Document.Links)
  return target;
}

int Document_Links::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Document.Links)
  int total_size = 0;

  // repeated int64 Backward = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->backward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->backward(i));
    }
    total_size += 1 * this->backward_size() + data_size;
  }

  // repeated int64 Forward = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->forward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->forward(i));
    }
    total_size += 1 * this->forward_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document_Links::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Document.Links)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Document_Links* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Document_Links>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Document.Links)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Document.Links)
    MergeFrom(*source);
  }
}

void Document_Links::MergeFrom(const Document_Links& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Document.Links)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  backward_.MergeFrom(from.backward_);
  forward_.MergeFrom(from.forward_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Document_Links::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Document.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document_Links::CopyFrom(const Document_Links& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Document.Links)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document_Links::IsInitialized() const {

  return true;
}

void Document_Links::Swap(Document_Links* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document_Links::InternalSwap(Document_Links* other) {
  backward_.UnsafeArenaSwap(&other->backward_);
  forward_.UnsafeArenaSwap(&other->forward_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Document_Links::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_Links_descriptor_;
  metadata.reflection = Document_Links_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document_Name_Language::kCodeFieldNumber;
const int Document_Name_Language::kCountryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document_Name_Language::Document_Name_Language()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Document.Name.Language)
}

void Document_Name_Language::InitAsDefaultInstance() {
}

Document_Name_Language::Document_Name_Language(const Document_Name_Language& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Document.Name.Language)
}

void Document_Name_Language::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document_Name_Language::~Document_Name_Language() {
  // @@protoc_insertion_point(destructor:Document.Name.Language)
  SharedDtor();
}

void Document_Name_Language::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Document_Name_Language::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document_Name_Language::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_Name_Language_descriptor_;
}

const Document_Name_Language& Document_Name_Language::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_schema_2eproto();
  return *default_instance_;
}

Document_Name_Language* Document_Name_Language::default_instance_ = NULL;

Document_Name_Language* Document_Name_Language::New(::google::protobuf::Arena* arena) const {
  Document_Name_Language* n = new Document_Name_Language;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document_Name_Language::Clear() {
// @@protoc_insertion_point(message_clear_start:Document.Name.Language)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_code()) {
      code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_country()) {
      country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Document_Name_Language::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Document.Name.Language)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Code = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Document.Name.Language.Code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Country;
        break;
      }

      // optional string Country = 8;
      case 8: {
        if (tag == 66) {
         parse_Country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Document.Name.Language.Country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Document.Name.Language)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Document.Name.Language)
  return false;
#undef DO_
}

void Document_Name_Language::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Document.Name.Language)
  // required string Code = 7;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Document.Name.Language.Code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->code(), output);
  }

  // optional string Country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Document.Name.Language.Country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Document.Name.Language)
}

::google::protobuf::uint8* Document_Name_Language::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Document.Name.Language)
  // required string Code = 7;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Document.Name.Language.Code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->code(), target);
  }

  // optional string Country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Document.Name.Language.Country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->country(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Document.Name.Language)
  return target;
}

int Document_Name_Language::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Document.Name.Language)
  int total_size = 0;

  // required string Code = 7;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->code());
  }
  // optional string Country = 8;
  if (has_country()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->country());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document_Name_Language::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Document.Name.Language)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Document_Name_Language* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Document_Name_Language>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Document.Name.Language)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Document.Name.Language)
    MergeFrom(*source);
  }
}

void Document_Name_Language::MergeFrom(const Document_Name_Language& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Document.Name.Language)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_has_code();
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (from.has_country()) {
      set_has_country();
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Document_Name_Language::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Document.Name.Language)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document_Name_Language::CopyFrom(const Document_Name_Language& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Document.Name.Language)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document_Name_Language::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Document_Name_Language::Swap(Document_Name_Language* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document_Name_Language::InternalSwap(Document_Name_Language* other) {
  code_.Swap(&other->code_);
  country_.Swap(&other->country_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Document_Name_Language::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_Name_Language_descriptor_;
  metadata.reflection = Document_Name_Language_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document_Name::kLanguageFieldNumber;
const int Document_Name::kUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document_Name::Document_Name()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Document.Name)
}

void Document_Name::InitAsDefaultInstance() {
}

Document_Name::Document_Name(const Document_Name& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Document.Name)
}

void Document_Name::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document_Name::~Document_Name() {
  // @@protoc_insertion_point(destructor:Document.Name)
  SharedDtor();
}

void Document_Name::SharedDtor() {
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Document_Name::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document_Name::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_Name_descriptor_;
}

const Document_Name& Document_Name::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_schema_2eproto();
  return *default_instance_;
}

Document_Name* Document_Name::default_instance_ = NULL;

Document_Name* Document_Name::New(::google::protobuf::Arena* arena) const {
  Document_Name* n = new Document_Name;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document_Name::Clear() {
// @@protoc_insertion_point(message_clear_start:Document.Name)
  if (has_url()) {
    url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  language_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Document_Name::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Document.Name)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated group Language = 6 { ... };
      case 6: {
        if (tag == 51) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_language:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtualNoRecursionDepth(
                6, input, add_language()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(51)) goto parse_loop_language;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(74)) goto parse_Url;
        break;
      }

      // optional string Url = 9;
      case 9: {
        if (tag == 74) {
         parse_Url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Document.Name.Url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Document.Name)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Document.Name)
  return false;
#undef DO_
}

void Document_Name::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Document.Name)
  // repeated group Language = 6 { ... };
  for (unsigned int i = 0, n = this->language_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      6, this->language(i), output);
  }

  // optional string Url = 9;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Document.Name.Url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Document.Name)
}

::google::protobuf::uint8* Document_Name::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Document.Name)
  // repeated group Language = 6 { ... };
  for (unsigned int i = 0, n = this->language_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupNoVirtualToArray(
        6, this->language(i), false, target);
  }

  // optional string Url = 9;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Document.Name.Url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Document.Name)
  return target;
}

int Document_Name::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Document.Name)
  int total_size = 0;

  // optional string Url = 9;
  if (has_url()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->url());
  }

  // repeated group Language = 6 { ... };
  total_size += 2 * this->language_size();
  for (int i = 0; i < this->language_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->language(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document_Name::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Document.Name)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Document_Name* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Document_Name>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Document.Name)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Document.Name)
    MergeFrom(*source);
  }
}

void Document_Name::MergeFrom(const Document_Name& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Document.Name)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  language_.MergeFrom(from.language_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_url()) {
      set_has_url();
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Document_Name::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Document.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document_Name::CopyFrom(const Document_Name& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Document.Name)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document_Name::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->language())) return false;
  return true;
}

void Document_Name::Swap(Document_Name* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document_Name::InternalSwap(Document_Name* other) {
  language_.UnsafeArenaSwap(&other->language_);
  url_.Swap(&other->url_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Document_Name::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_Name_descriptor_;
  metadata.reflection = Document_Name_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Document::kDocIdFieldNumber;
const int Document::kLinksFieldNumber;
const int Document::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Document::Document()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Document)
}

void Document::InitAsDefaultInstance() {
  links_ = const_cast< ::Document_Links*>(&::Document_Links::default_instance());
}

Document::Document(const Document& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Document)
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  docid_ = GOOGLE_LONGLONG(0);
  links_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document::~Document() {
  // @@protoc_insertion_point(destructor:Document)
  SharedDtor();
}

void Document::SharedDtor() {
  if (this != default_instance_) {
    delete links_;
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_descriptor_;
}

const Document& Document::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_schema_2eproto();
  return *default_instance_;
}

Document* Document::default_instance_ = NULL;

Document* Document::New(::google::protobuf::Arena* arena) const {
  Document* n = new Document;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Document::Clear() {
// @@protoc_insertion_point(message_clear_start:Document)
  if (_has_bits_[0 / 32] & 3u) {
    docid_ = GOOGLE_LONGLONG(0);
    if (has_links()) {
      if (links_ != NULL) links_->::Document_Links::Clear();
    }
  }
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Document)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 DocId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &docid_)));
          set_has_docid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(19)) goto parse_links;
        break;
      }

      // optional group Links = 2 { ... };
      case 2: {
        if (tag == 19) {
         parse_links:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtual(
                2, input, mutable_links()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(43)) goto parse_name;
        break;
      }

      // repeated group Name = 5 { ... };
      case 5: {
        if (tag == 43) {
         parse_name:
          DO_(input->IncrementRecursionDepth());
         parse_loop_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadGroupNoVirtualNoRecursionDepth(
                5, input, add_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(43)) goto parse_loop_name;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Document)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Document)
  return false;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Document)
  // required int64 DocId = 1;
  if (has_docid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->docid(), output);
  }

  // optional group Links = 2 { ... };
  if (has_links()) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      2, *this->links_, output);
  }

  // repeated group Name = 5 { ... };
  for (unsigned int i = 0, n = this->name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteGroupMaybeToArray(
      5, this->name(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Document)
}

::google::protobuf::uint8* Document::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Document)
  // required int64 DocId = 1;
  if (has_docid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->docid(), target);
  }

  // optional group Links = 2 { ... };
  if (has_links()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupNoVirtualToArray(
        2, *this->links_, false, target);
  }

  // repeated group Name = 5 { ... };
  for (unsigned int i = 0, n = this->name_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteGroupNoVirtualToArray(
        5, this->name(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Document)
  return target;
}

int Document::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Document)
  int total_size = 0;

  // required int64 DocId = 1;
  if (has_docid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->docid());
  }
  // optional group Links = 2 { ... };
  if (has_links()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        *this->links_);
  }

  // repeated group Name = 5 { ... };
  total_size += 2 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::GroupSizeNoVirtual(
        this->name(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Document)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Document* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Document>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Document)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Document)
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Document)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  name_.MergeFrom(from.name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_docid()) {
      set_docid(from.docid());
    }
    if (from.has_links()) {
      mutable_links()->::Document_Links::MergeFrom(from.links());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Document)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->name())) return false;
  return true;
}

void Document::Swap(Document* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Document::InternalSwap(Document* other) {
  std::swap(docid_, other->docid_);
  std::swap(links_, other->links_);
  name_.UnsafeArenaSwap(&other->name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_descriptor_;
  metadata.reflection = Document_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Document_Links

// repeated int64 Backward = 3;
int Document_Links::backward_size() const {
  return backward_.size();
}
void Document_Links::clear_backward() {
  backward_.Clear();
}
 ::google::protobuf::int64 Document_Links::backward(int index) const {
  // @@protoc_insertion_point(field_get:Document.Links.Backward)
  return backward_.Get(index);
}
 void Document_Links::set_backward(int index, ::google::protobuf::int64 value) {
  backward_.Set(index, value);
  // @@protoc_insertion_point(field_set:Document.Links.Backward)
}
 void Document_Links::add_backward(::google::protobuf::int64 value) {
  backward_.Add(value);
  // @@protoc_insertion_point(field_add:Document.Links.Backward)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Document_Links::backward() const {
  // @@protoc_insertion_point(field_list:Document.Links.Backward)
  return backward_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Document_Links::mutable_backward() {
  // @@protoc_insertion_point(field_mutable_list:Document.Links.Backward)
  return &backward_;
}

// repeated int64 Forward = 4;
int Document_Links::forward_size() const {
  return forward_.size();
}
void Document_Links::clear_forward() {
  forward_.Clear();
}
 ::google::protobuf::int64 Document_Links::forward(int index) const {
  // @@protoc_insertion_point(field_get:Document.Links.Forward)
  return forward_.Get(index);
}
 void Document_Links::set_forward(int index, ::google::protobuf::int64 value) {
  forward_.Set(index, value);
  // @@protoc_insertion_point(field_set:Document.Links.Forward)
}
 void Document_Links::add_forward(::google::protobuf::int64 value) {
  forward_.Add(value);
  // @@protoc_insertion_point(field_add:Document.Links.Forward)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Document_Links::forward() const {
  // @@protoc_insertion_point(field_list:Document.Links.Forward)
  return forward_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Document_Links::mutable_forward() {
  // @@protoc_insertion_point(field_mutable_list:Document.Links.Forward)
  return &forward_;
}

// -------------------------------------------------------------------

// Document_Name_Language

// required string Code = 7;
bool Document_Name_Language::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Document_Name_Language::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
void Document_Name_Language::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void Document_Name_Language::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_code();
}
 const ::std::string& Document_Name_Language::code() const {
  // @@protoc_insertion_point(field_get:Document.Name.Language.Code)
  return code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Document_Name_Language::set_code(const ::std::string& value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Document.Name.Language.Code)
}
 void Document_Name_Language::set_code(const char* value) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Document.Name.Language.Code)
}
 void Document_Name_Language::set_code(const char* value, size_t size) {
  set_has_code();
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Document.Name.Language.Code)
}
 ::std::string* Document_Name_Language::mutable_code() {
  set_has_code();
  // @@protoc_insertion_point(field_mutable:Document.Name.Language.Code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Document_Name_Language::release_code() {
  // @@protoc_insertion_point(field_release:Document.Name.Language.Code)
  clear_has_code();
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Document_Name_Language::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    set_has_code();
  } else {
    clear_has_code();
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:Document.Name.Language.Code)
}

// optional string Country = 8;
bool Document_Name_Language::has_country() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Document_Name_Language::set_has_country() {
  _has_bits_[0] |= 0x00000002u;
}
void Document_Name_Language::clear_has_country() {
  _has_bits_[0] &= ~0x00000002u;
}
void Document_Name_Language::clear_country() {
  country_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_country();
}
 const ::std::string& Document_Name_Language::country() const {
  // @@protoc_insertion_point(field_get:Document.Name.Language.Country)
  return country_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Document_Name_Language::set_country(const ::std::string& value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Document.Name.Language.Country)
}
 void Document_Name_Language::set_country(const char* value) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Document.Name.Language.Country)
}
 void Document_Name_Language::set_country(const char* value, size_t size) {
  set_has_country();
  country_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Document.Name.Language.Country)
}
 ::std::string* Document_Name_Language::mutable_country() {
  set_has_country();
  // @@protoc_insertion_point(field_mutable:Document.Name.Language.Country)
  return country_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Document_Name_Language::release_country() {
  // @@protoc_insertion_point(field_release:Document.Name.Language.Country)
  clear_has_country();
  return country_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Document_Name_Language::set_allocated_country(::std::string* country) {
  if (country != NULL) {
    set_has_country();
  } else {
    clear_has_country();
  }
  country_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:Document.Name.Language.Country)
}

// -------------------------------------------------------------------

// Document_Name

// repeated group Language = 6 { ... };
int Document_Name::language_size() const {
  return language_.size();
}
void Document_Name::clear_language() {
  language_.Clear();
}
const ::Document_Name_Language& Document_Name::language(int index) const {
  // @@protoc_insertion_point(field_get:Document.Name.language)
  return language_.Get(index);
}
::Document_Name_Language* Document_Name::mutable_language(int index) {
  // @@protoc_insertion_point(field_mutable:Document.Name.language)
  return language_.Mutable(index);
}
::Document_Name_Language* Document_Name::add_language() {
  // @@protoc_insertion_point(field_add:Document.Name.language)
  return language_.Add();
}
::google::protobuf::RepeatedPtrField< ::Document_Name_Language >*
Document_Name::mutable_language() {
  // @@protoc_insertion_point(field_mutable_list:Document.Name.language)
  return &language_;
}
const ::google::protobuf::RepeatedPtrField< ::Document_Name_Language >&
Document_Name::language() const {
  // @@protoc_insertion_point(field_list:Document.Name.language)
  return language_;
}

// optional string Url = 9;
bool Document_Name::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Document_Name::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
void Document_Name::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
void Document_Name::clear_url() {
  url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_url();
}
 const ::std::string& Document_Name::url() const {
  // @@protoc_insertion_point(field_get:Document.Name.Url)
  return url_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Document_Name::set_url(const ::std::string& value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Document.Name.Url)
}
 void Document_Name::set_url(const char* value) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Document.Name.Url)
}
 void Document_Name::set_url(const char* value, size_t size) {
  set_has_url();
  url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Document.Name.Url)
}
 ::std::string* Document_Name::mutable_url() {
  set_has_url();
  // @@protoc_insertion_point(field_mutable:Document.Name.Url)
  return url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Document_Name::release_url() {
  // @@protoc_insertion_point(field_release:Document.Name.Url)
  clear_has_url();
  return url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Document_Name::set_allocated_url(::std::string* url) {
  if (url != NULL) {
    set_has_url();
  } else {
    clear_has_url();
  }
  url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:Document.Name.Url)
}

// -------------------------------------------------------------------

// Document

// required int64 DocId = 1;
bool Document::has_docid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Document::set_has_docid() {
  _has_bits_[0] |= 0x00000001u;
}
void Document::clear_has_docid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Document::clear_docid() {
  docid_ = GOOGLE_LONGLONG(0);
  clear_has_docid();
}
 ::google::protobuf::int64 Document::docid() const {
  // @@protoc_insertion_point(field_get:Document.DocId)
  return docid_;
}
 void Document::set_docid(::google::protobuf::int64 value) {
  set_has_docid();
  docid_ = value;
  // @@protoc_insertion_point(field_set:Document.DocId)
}

// optional group Links = 2 { ... };
bool Document::has_links() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Document::set_has_links() {
  _has_bits_[0] |= 0x00000002u;
}
void Document::clear_has_links() {
  _has_bits_[0] &= ~0x00000002u;
}
void Document::clear_links() {
  if (links_ != NULL) links_->::Document_Links::Clear();
  clear_has_links();
}
const ::Document_Links& Document::links() const {
  // @@protoc_insertion_point(field_get:Document.links)
  return links_ != NULL ? *links_ : *default_instance_->links_;
}
::Document_Links* Document::mutable_links() {
  set_has_links();
  if (links_ == NULL) {
    links_ = new ::Document_Links;
  }
  // @@protoc_insertion_point(field_mutable:Document.links)
  return links_;
}
::Document_Links* Document::release_links() {
  // @@protoc_insertion_point(field_release:Document.links)
  clear_has_links();
  ::Document_Links* temp = links_;
  links_ = NULL;
  return temp;
}
void Document::set_allocated_links(::Document_Links* links) {
  delete links_;
  links_ = links;
  if (links) {
    set_has_links();
  } else {
    clear_has_links();
  }
  // @@protoc_insertion_point(field_set_allocated:Document.links)
}

// repeated group Name = 5 { ... };
int Document::name_size() const {
  return name_.size();
}
void Document::clear_name() {
  name_.Clear();
}
const ::Document_Name& Document::name(int index) const {
  // @@protoc_insertion_point(field_get:Document.name)
  return name_.Get(index);
}
::Document_Name* Document::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:Document.name)
  return name_.Mutable(index);
}
::Document_Name* Document::add_name() {
  // @@protoc_insertion_point(field_add:Document.name)
  return name_.Add();
}
::google::protobuf::RepeatedPtrField< ::Document_Name >*
Document::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:Document.name)
  return &name_;
}
const ::google::protobuf::RepeatedPtrField< ::Document_Name >&
Document::name() const {
  // @@protoc_insertion_point(field_list:Document.name)
  return name_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
