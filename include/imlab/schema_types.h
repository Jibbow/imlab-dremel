// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data/schema.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2fschema_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2fschema_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2fschema_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2fschema_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2fschema_2eproto;
class Document;
class DocumentDefaultTypeInternal;
extern DocumentDefaultTypeInternal _Document_default_instance_;
class Document_Links;
class Document_LinksDefaultTypeInternal;
extern Document_LinksDefaultTypeInternal _Document_Links_default_instance_;
class Document_Name;
class Document_NameDefaultTypeInternal;
extern Document_NameDefaultTypeInternal _Document_Name_default_instance_;
class Document_Name_Language;
class Document_Name_LanguageDefaultTypeInternal;
extern Document_Name_LanguageDefaultTypeInternal _Document_Name_Language_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Document* Arena::CreateMaybeMessage<::Document>(Arena*);
template<> ::Document_Links* Arena::CreateMaybeMessage<::Document_Links>(Arena*);
template<> ::Document_Name* Arena::CreateMaybeMessage<::Document_Name>(Arena*);
template<> ::Document_Name_Language* Arena::CreateMaybeMessage<::Document_Name_Language>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class Document_Links :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Document.Links) */ {
 public:
  Document_Links();
  virtual ~Document_Links();

  Document_Links(const Document_Links& from);
  Document_Links(Document_Links&& from) noexcept
    : Document_Links() {
    *this = ::std::move(from);
  }

  inline Document_Links& operator=(const Document_Links& from) {
    CopyFrom(from);
    return *this;
  }
  inline Document_Links& operator=(Document_Links&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Document_Links& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Document_Links* internal_default_instance() {
    return reinterpret_cast<const Document_Links*>(
               &_Document_Links_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Document_Links& a, Document_Links& b) {
    a.Swap(&b);
  }
  inline void Swap(Document_Links* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Document_Links* New() const final {
    return CreateMaybeMessage<Document_Links>(nullptr);
  }

  Document_Links* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Document_Links>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Document_Links& from);
  void MergeFrom(const Document_Links& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Document_Links* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Document.Links";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2fschema_2eproto);
    return ::descriptor_table_data_2fschema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBackwardFieldNumber = 3,
    kForwardFieldNumber = 4,
  };
  // repeated int64 Backward = 3;
  int backward_size() const;
  private:
  int _internal_backward_size() const;
  public:
  void clear_backward();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_backward(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_backward() const;
  void _internal_add_backward(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_backward();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 backward(int index) const;
  void set_backward(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_backward(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      backward() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_backward();

  // repeated int64 Forward = 4;
  int forward_size() const;
  private:
  int _internal_forward_size() const;
  public:
  void clear_forward();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_forward(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_forward() const;
  void _internal_add_forward(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_forward();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 forward(int index) const;
  void set_forward(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_forward(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      forward() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_forward();

  // @@protoc_insertion_point(class_scope:Document.Links)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > backward_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > forward_;
  friend struct ::TableStruct_data_2fschema_2eproto;
};
// -------------------------------------------------------------------

class Document_Name_Language :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Document.Name.Language) */ {
 public:
  Document_Name_Language();
  virtual ~Document_Name_Language();

  Document_Name_Language(const Document_Name_Language& from);
  Document_Name_Language(Document_Name_Language&& from) noexcept
    : Document_Name_Language() {
    *this = ::std::move(from);
  }

  inline Document_Name_Language& operator=(const Document_Name_Language& from) {
    CopyFrom(from);
    return *this;
  }
  inline Document_Name_Language& operator=(Document_Name_Language&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Document_Name_Language& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Document_Name_Language* internal_default_instance() {
    return reinterpret_cast<const Document_Name_Language*>(
               &_Document_Name_Language_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Document_Name_Language& a, Document_Name_Language& b) {
    a.Swap(&b);
  }
  inline void Swap(Document_Name_Language* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Document_Name_Language* New() const final {
    return CreateMaybeMessage<Document_Name_Language>(nullptr);
  }

  Document_Name_Language* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Document_Name_Language>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Document_Name_Language& from);
  void MergeFrom(const Document_Name_Language& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Document_Name_Language* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Document.Name.Language";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2fschema_2eproto);
    return ::descriptor_table_data_2fschema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 7,
    kCountryFieldNumber = 8,
  };
  // required string Code = 7;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // optional string Country = 8;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // @@protoc_insertion_point(class_scope:Document.Name.Language)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  friend struct ::TableStruct_data_2fschema_2eproto;
};
// -------------------------------------------------------------------

class Document_Name :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Document.Name) */ {
 public:
  Document_Name();
  virtual ~Document_Name();

  Document_Name(const Document_Name& from);
  Document_Name(Document_Name&& from) noexcept
    : Document_Name() {
    *this = ::std::move(from);
  }

  inline Document_Name& operator=(const Document_Name& from) {
    CopyFrom(from);
    return *this;
  }
  inline Document_Name& operator=(Document_Name&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Document_Name& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Document_Name* internal_default_instance() {
    return reinterpret_cast<const Document_Name*>(
               &_Document_Name_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Document_Name& a, Document_Name& b) {
    a.Swap(&b);
  }
  inline void Swap(Document_Name* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Document_Name* New() const final {
    return CreateMaybeMessage<Document_Name>(nullptr);
  }

  Document_Name* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Document_Name>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Document_Name& from);
  void MergeFrom(const Document_Name& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Document_Name* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Document.Name";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2fschema_2eproto);
    return ::descriptor_table_data_2fschema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Document_Name_Language Language;

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageFieldNumber = 6,
    kUrlFieldNumber = 9,
  };
  // repeated group Language = 6 { ... };
  int language_size() const;
  private:
  int _internal_language_size() const;
  public:
  void clear_language();
  ::Document_Name_Language* mutable_language(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Document_Name_Language >*
      mutable_language();
  private:
  const ::Document_Name_Language& _internal_language(int index) const;
  ::Document_Name_Language* _internal_add_language();
  public:
  const ::Document_Name_Language& language(int index) const;
  ::Document_Name_Language* add_language();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Document_Name_Language >&
      language() const;

  // optional string Url = 9;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:Document.Name)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Document_Name_Language > language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_data_2fschema_2eproto;
};
// -------------------------------------------------------------------

class Document :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Document) */ {
 public:
  Document();
  virtual ~Document();

  Document(const Document& from);
  Document(Document&& from) noexcept
    : Document() {
    *this = ::std::move(from);
  }

  inline Document& operator=(const Document& from) {
    CopyFrom(from);
    return *this;
  }
  inline Document& operator=(Document&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Document& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Document* internal_default_instance() {
    return reinterpret_cast<const Document*>(
               &_Document_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Document& a, Document& b) {
    a.Swap(&b);
  }
  inline void Swap(Document* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Document* New() const final {
    return CreateMaybeMessage<Document>(nullptr);
  }

  Document* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Document>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Document& from);
  void MergeFrom(const Document& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Document* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Document";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_2fschema_2eproto);
    return ::descriptor_table_data_2fschema_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Document_Links Links;
  typedef Document_Name Name;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kLinksFieldNumber = 2,
    kDocIdFieldNumber = 1,
  };
  // repeated group Name = 5 { ... };
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  ::Document_Name* mutable_name(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Document_Name >*
      mutable_name();
  private:
  const ::Document_Name& _internal_name(int index) const;
  ::Document_Name* _internal_add_name();
  public:
  const ::Document_Name& name(int index) const;
  ::Document_Name* add_name();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Document_Name >&
      name() const;

  // optional group Links = 2 { ... };
  bool has_links() const;
  private:
  bool _internal_has_links() const;
  public:
  void clear_links();
  const ::Document_Links& links() const;
  ::Document_Links* release_links();
  ::Document_Links* mutable_links();
  void set_allocated_links(::Document_Links* links);
  private:
  const ::Document_Links& _internal_links() const;
  ::Document_Links* _internal_mutable_links();
  public:

  // required int64 DocId = 1;
  bool has_docid() const;
  private:
  bool _internal_has_docid() const;
  public:
  void clear_docid();
  ::PROTOBUF_NAMESPACE_ID::int64 docid() const;
  void set_docid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_docid() const;
  void _internal_set_docid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Document)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Document_Name > name_;
  ::Document_Links* links_;
  ::PROTOBUF_NAMESPACE_ID::int64 docid_;
  friend struct ::TableStruct_data_2fschema_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Document_Links

// repeated int64 Backward = 3;
inline int Document_Links::_internal_backward_size() const {
  return backward_.size();
}
inline int Document_Links::backward_size() const {
  return _internal_backward_size();
}
inline void Document_Links::clear_backward() {
  backward_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Document_Links::_internal_backward(int index) const {
  return backward_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Document_Links::backward(int index) const {
  // @@protoc_insertion_point(field_get:Document.Links.Backward)
  return _internal_backward(index);
}
inline void Document_Links::set_backward(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  backward_.Set(index, value);
  // @@protoc_insertion_point(field_set:Document.Links.Backward)
}
inline void Document_Links::_internal_add_backward(::PROTOBUF_NAMESPACE_ID::int64 value) {
  backward_.Add(value);
}
inline void Document_Links::add_backward(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_backward(value);
  // @@protoc_insertion_point(field_add:Document.Links.Backward)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Document_Links::_internal_backward() const {
  return backward_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Document_Links::backward() const {
  // @@protoc_insertion_point(field_list:Document.Links.Backward)
  return _internal_backward();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Document_Links::_internal_mutable_backward() {
  return &backward_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Document_Links::mutable_backward() {
  // @@protoc_insertion_point(field_mutable_list:Document.Links.Backward)
  return _internal_mutable_backward();
}

// repeated int64 Forward = 4;
inline int Document_Links::_internal_forward_size() const {
  return forward_.size();
}
inline int Document_Links::forward_size() const {
  return _internal_forward_size();
}
inline void Document_Links::clear_forward() {
  forward_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Document_Links::_internal_forward(int index) const {
  return forward_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Document_Links::forward(int index) const {
  // @@protoc_insertion_point(field_get:Document.Links.Forward)
  return _internal_forward(index);
}
inline void Document_Links::set_forward(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  forward_.Set(index, value);
  // @@protoc_insertion_point(field_set:Document.Links.Forward)
}
inline void Document_Links::_internal_add_forward(::PROTOBUF_NAMESPACE_ID::int64 value) {
  forward_.Add(value);
}
inline void Document_Links::add_forward(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_forward(value);
  // @@protoc_insertion_point(field_add:Document.Links.Forward)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Document_Links::_internal_forward() const {
  return forward_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
Document_Links::forward() const {
  // @@protoc_insertion_point(field_list:Document.Links.Forward)
  return _internal_forward();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Document_Links::_internal_mutable_forward() {
  return &forward_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
Document_Links::mutable_forward() {
  // @@protoc_insertion_point(field_mutable_list:Document.Links.Forward)
  return _internal_mutable_forward();
}

// -------------------------------------------------------------------

// Document_Name_Language

// required string Code = 7;
inline bool Document_Name_Language::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Document_Name_Language::has_code() const {
  return _internal_has_code();
}
inline void Document_Name_Language::clear_code() {
  code_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Document_Name_Language::code() const {
  // @@protoc_insertion_point(field_get:Document.Name.Language.Code)
  return _internal_code();
}
inline void Document_Name_Language::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:Document.Name.Language.Code)
}
inline std::string* Document_Name_Language::mutable_code() {
  // @@protoc_insertion_point(field_mutable:Document.Name.Language.Code)
  return _internal_mutable_code();
}
inline const std::string& Document_Name_Language::_internal_code() const {
  return code_.GetNoArena();
}
inline void Document_Name_Language::_internal_set_code(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Document_Name_Language::set_code(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Document.Name.Language.Code)
}
inline void Document_Name_Language::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Document.Name.Language.Code)
}
inline void Document_Name_Language::set_code(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  code_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Document.Name.Language.Code)
}
inline std::string* Document_Name_Language::_internal_mutable_code() {
  _has_bits_[0] |= 0x00000001u;
  return code_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Document_Name_Language::release_code() {
  // @@protoc_insertion_point(field_release:Document.Name.Language.Code)
  if (!has_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return code_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Document_Name_Language::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  code_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:Document.Name.Language.Code)
}

// optional string Country = 8;
inline bool Document_Name_Language::_internal_has_country() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Document_Name_Language::has_country() const {
  return _internal_has_country();
}
inline void Document_Name_Language::clear_country() {
  country_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Document_Name_Language::country() const {
  // @@protoc_insertion_point(field_get:Document.Name.Language.Country)
  return _internal_country();
}
inline void Document_Name_Language::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:Document.Name.Language.Country)
}
inline std::string* Document_Name_Language::mutable_country() {
  // @@protoc_insertion_point(field_mutable:Document.Name.Language.Country)
  return _internal_mutable_country();
}
inline const std::string& Document_Name_Language::_internal_country() const {
  return country_.GetNoArena();
}
inline void Document_Name_Language::_internal_set_country(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Document_Name_Language::set_country(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  country_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Document.Name.Language.Country)
}
inline void Document_Name_Language::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Document.Name.Language.Country)
}
inline void Document_Name_Language::set_country(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  country_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Document.Name.Language.Country)
}
inline std::string* Document_Name_Language::_internal_mutable_country() {
  _has_bits_[0] |= 0x00000002u;
  return country_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Document_Name_Language::release_country() {
  // @@protoc_insertion_point(field_release:Document.Name.Language.Country)
  if (!has_country()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return country_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Document_Name_Language::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  country_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country);
  // @@protoc_insertion_point(field_set_allocated:Document.Name.Language.Country)
}

// -------------------------------------------------------------------

// Document_Name

// repeated group Language = 6 { ... };
inline int Document_Name::_internal_language_size() const {
  return language_.size();
}
inline int Document_Name::language_size() const {
  return _internal_language_size();
}
inline void Document_Name::clear_language() {
  language_.Clear();
}
inline ::Document_Name_Language* Document_Name::mutable_language(int index) {
  // @@protoc_insertion_point(field_mutable:Document.Name.language)
  return language_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Document_Name_Language >*
Document_Name::mutable_language() {
  // @@protoc_insertion_point(field_mutable_list:Document.Name.language)
  return &language_;
}
inline const ::Document_Name_Language& Document_Name::_internal_language(int index) const {
  return language_.Get(index);
}
inline const ::Document_Name_Language& Document_Name::language(int index) const {
  // @@protoc_insertion_point(field_get:Document.Name.language)
  return _internal_language(index);
}
inline ::Document_Name_Language* Document_Name::_internal_add_language() {
  return language_.Add();
}
inline ::Document_Name_Language* Document_Name::add_language() {
  // @@protoc_insertion_point(field_add:Document.Name.language)
  return _internal_add_language();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Document_Name_Language >&
Document_Name::language() const {
  // @@protoc_insertion_point(field_list:Document.Name.language)
  return language_;
}

// optional string Url = 9;
inline bool Document_Name::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Document_Name::has_url() const {
  return _internal_has_url();
}
inline void Document_Name::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Document_Name::url() const {
  // @@protoc_insertion_point(field_get:Document.Name.Url)
  return _internal_url();
}
inline void Document_Name::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:Document.Name.Url)
}
inline std::string* Document_Name::mutable_url() {
  // @@protoc_insertion_point(field_mutable:Document.Name.Url)
  return _internal_mutable_url();
}
inline const std::string& Document_Name::_internal_url() const {
  return url_.GetNoArena();
}
inline void Document_Name::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Document_Name::set_url(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Document.Name.Url)
}
inline void Document_Name::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Document.Name.Url)
}
inline void Document_Name::set_url(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Document.Name.Url)
}
inline std::string* Document_Name::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Document_Name::release_url() {
  // @@protoc_insertion_point(field_release:Document.Name.Url)
  if (!has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return url_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Document_Name::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:Document.Name.Url)
}

// -------------------------------------------------------------------

// Document

// required int64 DocId = 1;
inline bool Document::_internal_has_docid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Document::has_docid() const {
  return _internal_has_docid();
}
inline void Document::clear_docid() {
  docid_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Document::_internal_docid() const {
  return docid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Document::docid() const {
  // @@protoc_insertion_point(field_get:Document.DocId)
  return _internal_docid();
}
inline void Document::_internal_set_docid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  docid_ = value;
}
inline void Document::set_docid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_docid(value);
  // @@protoc_insertion_point(field_set:Document.DocId)
}

// optional group Links = 2 { ... };
inline bool Document::_internal_has_links() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || links_ != nullptr);
  return value;
}
inline bool Document::has_links() const {
  return _internal_has_links();
}
inline void Document::clear_links() {
  if (links_ != nullptr) links_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Document_Links& Document::_internal_links() const {
  const ::Document_Links* p = links_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Document_Links*>(
      &::_Document_Links_default_instance_);
}
inline const ::Document_Links& Document::links() const {
  // @@protoc_insertion_point(field_get:Document.links)
  return _internal_links();
}
inline ::Document_Links* Document::release_links() {
  // @@protoc_insertion_point(field_release:Document.links)
  _has_bits_[0] &= ~0x00000001u;
  ::Document_Links* temp = links_;
  links_ = nullptr;
  return temp;
}
inline ::Document_Links* Document::_internal_mutable_links() {
  _has_bits_[0] |= 0x00000001u;
  if (links_ == nullptr) {
    auto* p = CreateMaybeMessage<::Document_Links>(GetArenaNoVirtual());
    links_ = p;
  }
  return links_;
}
inline ::Document_Links* Document::mutable_links() {
  // @@protoc_insertion_point(field_mutable:Document.links)
  return _internal_mutable_links();
}
inline void Document::set_allocated_links(::Document_Links* links) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete links_;
  }
  if (links) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      links = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, links, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  links_ = links;
  // @@protoc_insertion_point(field_set_allocated:Document.links)
}

// repeated group Name = 5 { ... };
inline int Document::_internal_name_size() const {
  return name_.size();
}
inline int Document::name_size() const {
  return _internal_name_size();
}
inline void Document::clear_name() {
  name_.Clear();
}
inline ::Document_Name* Document::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:Document.name)
  return name_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Document_Name >*
Document::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:Document.name)
  return &name_;
}
inline const ::Document_Name& Document::_internal_name(int index) const {
  return name_.Get(index);
}
inline const ::Document_Name& Document::name(int index) const {
  // @@protoc_insertion_point(field_get:Document.name)
  return _internal_name(index);
}
inline ::Document_Name* Document::_internal_add_name() {
  return name_.Add();
}
inline ::Document_Name* Document::add_name() {
  // @@protoc_insertion_point(field_add:Document.name)
  return _internal_add_name();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Document_Name >&
Document::name() const {
  // @@protoc_insertion_point(field_list:Document.name)
  return name_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2fschema_2eproto
